name: Laravel API Kit CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  APP_ENV: testing
  APP_KEY: base64:2fl+Ktvkdg+Ywk8H1f2ilsqLuzaafPwPXPSgzU0IECU=
  DB_CONNECTION: mysql
  DB_HOST: 127.0.0.1
  DB_PORT: 3306
  DB_DATABASE: laravel_test
  DB_USERNAME: root
  DB_PASSWORD: password
  REDIS_HOST: 127.0.0.1
  REDIS_PASSWORD: null
  REDIS_PORT: 6379

jobs:
  # Code Quality and Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug
        
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-
          
    - name: Install dependencies
      working-directory: ./project
      run: composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader
      
    - name: Check code formatting with Laravel Pint
      working-directory: ./project
      run: ./vendor/bin/pint --test
      
    - name: Run static analysis with PHPStan
      working-directory: ./project
      run: ./vendor/bin/phpstan analyse --memory-limit=2G
      
    - name: Check for security vulnerabilities
      working-directory: ./project
      run: composer audit

  # Testing Suite
  tests:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        
      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP ${{ matrix.php-version }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
        coverage: xdebug
        
    - name: Cache Composer packages
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php-version }}-
          
    - name: Install dependencies
      working-directory: ./project
      run: composer install --prefer-dist --no-interaction --no-progress --optimize-autoloader
      
    - name: Copy environment file
      working-directory: ./project
      run: cp .env.example .env
      
    - name: Generate application key
      working-directory: ./project
      run: php artisan key:generate
      
    - name: Create database
      run: mysql -h 127.0.0.1 -u root -ppassword -e 'CREATE DATABASE IF NOT EXISTS laravel_test;'
      
    - name: Run database migrations
      working-directory: ./project
      run: php artisan migrate --force
      
    - name: Run tests with Pest
      working-directory: ./project
      run: php artisan test --coverage --coverage-clover=coverage.xml
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./project/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './project'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.dev
        push: false
        tags: laravel-api-kit:dev-test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: ./project
        file: ./docker/Dockerfile.prod
        push: false
        tags: laravel-api-kit:prod-test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [code-quality, tests, security, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.laravel-api-kit.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "This would typically deploy to your staging server"
        echo "Configure your deployment steps here"

  # Deploy to Production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [code-quality, tests, security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://laravel-api-kit.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment..."
        echo "This would typically deploy to your production server"
        echo "Configure your deployment steps here"

  # Notify on completion
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [code-quality, tests, security, docker-build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.code-quality.result == 'success' && needs.tests.result == 'success' && needs.security.result == 'success' && needs.docker-build.result == 'success' }}
      run: |
        echo "‚úÖ All checks passed successfully!"
        echo "Ready for deployment"
        
    - name: Notify failure
      if: ${{ needs.code-quality.result == 'failure' || needs.tests.result == 'failure' || needs.security.result == 'failure' || needs.docker-build.result == 'failure' }}
      run: |
        echo "‚ùå Some checks failed!"
        echo "Please review the failed jobs and fix the issues"
